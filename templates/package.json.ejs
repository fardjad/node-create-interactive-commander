<% 
const { default: latestVersion } = await import("latest-version");

const eslintExtArgs =
  "--ext .js --ext .cjs --ext .mjs --ext .ts --ext .cts --ext .mts --ext .d.ts";

const devDependencyKeys = [
  "@trivago/prettier-plugin-sort-imports",
  "@types/node",
  "@typescript-eslint/eslint-plugin",
  "@typescript-eslint/parser",
  "c8",
  "eslint-config-prettier",
  "eslint-config-xo-typescript",
  "eslint-config-xo",
  "eslint-plugin-unicorn",
  "eslint",
  "prettier-plugin-packagejson",
  "prettier",
  "typescript",
];

const dependencyKeys = ["glob", "interactive-commander", "tsx"];

const createDependencies = async (keys) =>
  Object.fromEntries(
    await Promise.all(
      keys.map(async (key) => {
        const version = await latestVersion(key);
        return [key, `^${version}`];
      }),
    ),
  );
%>
{
  "name": "<%- locals.packageName %>",
  "version": "0.0.0",
  "type": "module",
  "bin": {
    "<%- locals.commandName %>": "./bin/run.js"
  },
  "files": [
    "bin",
    "src",
    "tsconfig.json"
  ],
  "scripts": {
    "format": "prettier --write . && eslint <%- eslintExtArgs %> --fix .",
    "fix": "npm run format",
    "lint": "prettier --check . && eslint <%- eslintExtArgs %> .",
    "pretest": "tsc",
    "test": "glob -c \"tsx --test --test-reporter spec\" \"src/**/*.test.ts\"",
    "posttest": "npm run lint",
    "test:coverage": "c8 --reporter=lcov npm run test"
  },
  "dependencies": <%- JSON.stringify(await createDependencies(dependencyKeys)) %>,
  "devDependencies": <%- JSON.stringify(await createDependencies(devDependencyKeys)) %>
}